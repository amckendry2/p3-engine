#include "sprite.h"
#include "pixel_canvas.h"
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_mixer.h>
#include <stdio.h>
#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

const string SPRITES_PATH = "./sprites";

const int SCREEN_WIDTH = 1024;
const int SCREEN_HEIGHT = 1024;
const int PIXEL_WIDTH = 128;
const int PIXEL_HEIGHT = 128;

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;
PixelCanvas pCanvas;


bool init(){
    bool success = true;

    if(SDL_Init(SDL_INIT_VIDEO) < 0){
	printf("SDL could not initialize. Error: %s\n", SDL_GetError());
	success = false;
    }

    gWindow = SDL_CreateWindow("P3", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if(gWindow == NULL){
	printf("SDL could not create window. Error: %s\n", SDL_GetError());
	success = false;
    }

    gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if(gRenderer == NULL){
	printf("SDL could not create Renderer. Error: %s\n", SDL_GetError());
	success = false;
    }

    if(!IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG){
	printf("SDL could not initiate Image processing. Error: %s\n", IMG_GetError());
	success = false;
    }
					       
    pCanvas.init(gRenderer, gWindow, PIXEL_WIDTH, PIXEL_HEIGHT);
    return success;
}

bool loadMedia(){
    pCanvas.loadSpriteLibrary(SPRITES_PATH);
    return true;
}


void close(){
    SDL_DestroyRenderer(gRenderer);
    SDL_DestroyWindow(gWindow);
    gWindow = NULL;
    gRenderer = NULL;
    SDL_Quit();
}

int main(int argc, char* args[]){
    int x = 0;
    int y = 0;
    int frame = 0;
    if(!init()){
	printf("Failed to initialize. \n");
	return 0;
    }
    if(!loadMedia()){
	printf("Failed to load media. \n");
    }
    bool quit = false;
    SDL_Event e;
    while(!quit){
	while(SDL_PollEvent(&e) != 0){
	    if(e.type == SDL_QUIT){
		quit = true;
	    }
	    if(e.type == SDL_KEYDOWN){
		switch(e.key.keysym.sym){
		case SDLK_d:
		    x+=1;
		    break;
		case SDLK_a:
		    x-=1;
		    break;
		case SDLK_w:
		    y-=1;
		    break;
		case SDLK_s:
		    y+=1;
		    break;
		case SDLK_q:
		    quit = true;
		    break;
		}
	    }
	}
	
	SDL_Color clearColor {0, 0, 0, 255};
	pCanvas.clear(clearColor);
	pCanvas.spr("pixelguysheet", frame/20, 64 + x, 64 + y);
	pCanvas.render();
	SDL_RenderPresent(gRenderer);

	++frame;
	if(frame / 20 > 3)
	    frame = 0;
    }
    close();
    return 0;
}
